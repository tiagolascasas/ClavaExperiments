-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rgbToGrayscale_rgbToGrayscale_Pipeline_VITIS_LOOP_165_1_VITIS_LOOP_167_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln165 : IN STD_LOGIC_VECTOR (57 downto 0);
    input_image : IN STD_LOGIC_VECTOR (63 downto 0);
    trunc_ln1 : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of rgbToGrayscale_rgbToGrayscale_Pipeline_VITIS_LOOP_165_1_VITIS_LOOP_167_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv480_lc_1 : STD_LOGIC_VECTOR (479 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv64_3FD322D0E5604189 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010011001000101101000011100101011000000100000110001001";
    constant ap_const_lv64_3FE2C8B439581062 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100010110010001011010000111001010110000001000001100010";
    constant ap_const_lv64_3FBD2F1A9FBE76C9 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110111101001011110001101010011111101111100111011011001001";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv21_2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal icmp_ln165_reg_1220 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state30_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state33_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_state36_pp0_stage2_iter11 : BOOLEAN;
    signal ap_block_state39_pp0_stage2_iter12 : BOOLEAN;
    signal ap_block_state42_pp0_stage2_iter13 : BOOLEAN;
    signal ap_block_state45_pp0_stage2_iter14 : BOOLEAN;
    signal ap_block_state48_pp0_stage2_iter15 : BOOLEAN;
    signal ap_block_state51_pp0_stage2_iter16 : BOOLEAN;
    signal ap_block_state54_pp0_stage2_iter17 : BOOLEAN;
    signal ap_block_state57_pp0_stage2_iter18 : BOOLEAN;
    signal ap_block_state60_pp0_stage2_iter19 : BOOLEAN;
    signal ap_block_state63_pp0_stage2_iter20 : BOOLEAN;
    signal ap_block_state66_pp0_stage2_iter21 : BOOLEAN;
    signal ap_block_state69_pp0_stage2_iter22 : BOOLEAN;
    signal ap_block_state72_pp0_stage2_iter23 : BOOLEAN;
    signal icmp_ln165_reg_1220_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state75_pp0_stage2_iter24 : BOOLEAN;
    signal ap_block_state78_pp0_stage2_iter25 : BOOLEAN;
    signal ap_block_state81_pp0_stage2_iter26 : BOOLEAN;
    signal ap_block_state84_pp0_stage2_iter27 : BOOLEAN;
    signal ap_block_state87_pp0_stage2_iter28 : BOOLEAN;
    signal ap_block_state90_pp0_stage2_iter29 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mask_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table_ce0 : STD_LOGIC;
    signal mask_table_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln165_reg_1220_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln165_reg_1220_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state76_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state79_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state82_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state85_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state88_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state91_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_reg_1204 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_load_reg_1209 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln167_fu_329_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln167_reg_1214 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln165_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1220_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln165_1_fu_339_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln165_1_reg_1224 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln167_1_fu_345_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln167_1_reg_1229 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_load_reg_1235 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state35_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state41_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state44_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state47_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state50_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state53_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state56_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_state59_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_state62_pp0_stage1_iter20 : BOOLEAN;
    signal ap_block_state65_pp0_stage1_iter21 : BOOLEAN;
    signal ap_block_state68_pp0_stage1_iter22 : BOOLEAN;
    signal ap_block_state71_pp0_stage1_iter23 : BOOLEAN;
    signal ap_block_state74_pp0_stage1_iter24 : BOOLEAN;
    signal ap_block_state77_pp0_stage1_iter25 : BOOLEAN;
    signal ap_block_state80_pp0_stage1_iter26 : BOOLEAN;
    signal ap_block_state83_pp0_stage1_iter27 : BOOLEAN;
    signal ap_block_state86_pp0_stage1_iter28 : BOOLEAN;
    signal ap_block_state89_pp0_stage1_iter29 : BOOLEAN;
    signal ap_block_state92_pp0_stage1_iter30 : BOOLEAN;
    signal ap_predicate_op511_write_state92 : BOOLEAN;
    signal ap_block_state92_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln167_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_1240_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_1_fu_389_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln165_1_reg_1247 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln165_3_fu_425_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln165_3_reg_1253 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln169_fu_455_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln169_reg_1259 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln169_2_reg_1264 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal trunc_ln169_6_fu_533_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln169_6_reg_1275 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln169_5_reg_1280 : STD_LOGIC_VECTOR (57 downto 0);
    signal add_ln169_7_fu_552_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln169_7_reg_1285 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln169_10_fu_558_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln169_10_reg_1290 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln169_2_fu_589_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_2_reg_1295_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_fu_611_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_6_reg_1306_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln169_8_reg_1311 : STD_LOGIC_VECTOR (57 downto 0);
    signal add_ln169_8_fu_649_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_8_reg_1316_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln174_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_1321_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_read_reg_1332 : STD_LOGIC_VECTOR (511 downto 0);
    signal r_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_read_reg_1342 : STD_LOGIC_VECTOR (511 downto 0);
    signal g_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_read_reg_1352 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_fu_749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_1377 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_1387 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_1397 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_reg_1402 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_1407 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_4_reg_1415 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_V_3_fu_776_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sig_V_3_reg_1423 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln368_fu_795_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_reg_1434 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_4_reg_1439 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_988_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_5_reg_1444 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln515_fu_996_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_reg_1449 : STD_LOGIC_VECTOR (11 downto 0);
    signal isNeg_reg_1454 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1512_fu_1010_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1512_reg_1460 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln165_2_fu_1024_p3 : STD_LOGIC_VECTOR (479 downto 0);
    signal select_ln165_2_reg_1470 : STD_LOGIC_VECTOR (479 downto 0);
    signal result_V_fu_1108_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_1476 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter30_stage0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln541_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln169_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln169_1_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln169_2_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal phi_ln174_fu_174 : STD_LOGIC_VECTOR (479 downto 0);
    signal select_ln174_fu_1138_p3 : STD_LOGIC_VECTOR (479 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal jj_fu_178 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln167_1_fu_666_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_182 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln167_fu_660_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_186 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln165_4_fu_497_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_fu_190 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln165_fu_474_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (18 downto 0);
    signal gray_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_276_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_290_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_349_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln167_1_fu_360_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln167_fu_356_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln167_1_fu_367_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln167_mid1_fu_397_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln167_1_mid1_fu_408_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln167_2_fu_404_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln167_3_fu_415_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln169_1_fu_419_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln169_fu_371_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln169_1_fu_433_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln169_fu_437_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_4_fu_443_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln169_3_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln169_1_fu_459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln165_fu_479_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal or_ln165_1_fu_488_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln169_fu_502_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln165_1_fu_484_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln169_3_fu_515_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_6_fu_521_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln169_4_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln169_4_fu_537_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln165_2_fu_493_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln165_fu_572_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln169_1_fu_582_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln169_4_fu_594_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_616_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln169_5_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln169_5_fu_634_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln169_7_fu_627_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_21_fu_578_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln169_1_fu_691_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln169_2_fu_698_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln169_fu_702_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln169_3_fu_712_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln169_3_fu_719_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln169_1_fu_723_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln169_5_fu_733_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln169_4_fu_740_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln169_2_fu_744_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal index_fu_780_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_820_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_1_fu_827_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln779_fu_847_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_exp_V_fu_833_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_V_fu_843_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sig_V_1_fu_866_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln1497_fu_872_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sign_V_1_fu_852_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_5_fu_860_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_V_4_fu_878_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln1035_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_1_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1035_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_809_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_3_fu_884_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1035_fu_900_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln19_1_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_1_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln1035_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1035_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1035_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_939_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_1_fu_959_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_2_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_exp_V_3_fu_978_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_fu_992_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mantissa_fu_1031_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln1512_fu_1044_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_1047_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_fu_1053_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_1040_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1488_fu_1057_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_1061_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_fu_1073_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_1067_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln818_fu_1081_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1085_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_1095_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_fu_1102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1122_p4 : STD_LOGIC_VECTOR (447 downto 0);
    signal tmp_2_fu_1131_p3 : STD_LOGIC_VECTOR (479 downto 0);
    signal grp_fu_276_ce : STD_LOGIC;
    signal grp_fu_282_ce : STD_LOGIC;
    signal grp_fu_290_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_idle_pp0_0to29 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to30 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component rgbToGrayscale_fptrunc_64ns_32_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rgbToGrayscale_fpext_32ns_64_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component rgbToGrayscale_dadd_64ns_64ns_64_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component rgbToGrayscale_dmul_64ns_64ns_64_4_med_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component rgbToGrayscale_sitodp_32ns_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component rgbToGrayscale_rgbToGrayscale_Pipeline_VITIS_LOOP_165_1_VITIS_LOOP_167_2_mask_table_ROM_AUTObkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component rgbToGrayscale_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mask_table_U : component rgbToGrayscale_rgbToGrayscale_Pipeline_VITIS_LOOP_165_1_VITIS_LOOP_167_2_mask_table_ROM_AUTObkb
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table_address0,
        ce0 => mask_table_ce0,
        q0 => mask_table_q0);

    fptrunc_64ns_32_1_no_dsp_1_U1 : component rgbToGrayscale_fptrunc_64ns_32_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_276_p2,
        dout => gray_fu_269_p1);

    fpext_32ns_64_1_no_dsp_1_U2 : component rgbToGrayscale_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => gray_fu_269_p1,
        dout => dc_fu_272_p1);

    dadd_64ns_64ns_64_5_no_dsp_1_U3 : component rgbToGrayscale_dadd_64ns_64ns_64_5_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_276_p0,
        din1 => grp_fu_276_p1,
        ce => grp_fu_276_ce,
        dout => grp_fu_276_p2);

    dmul_64ns_64ns_64_4_med_dsp_1_U4 : component rgbToGrayscale_dmul_64ns_64ns_64_4_med_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_290_p1,
        din1 => grp_fu_282_p1,
        ce => grp_fu_282_ce,
        dout => grp_fu_282_p2);

    sitodp_32ns_64_4_no_dsp_1_U5 : component rgbToGrayscale_sitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_290_p0,
        ce => grp_fu_290_ce,
        dout => grp_fu_290_p1);

    flow_control_loop_pipe_sequential_init_U : component rgbToGrayscale_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter30_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)))) then 
                    ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter14_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter15_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter16_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter17_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter18_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter19_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter20_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter21_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter21_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter22_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter22_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter23_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter23_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter24_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter24_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter25_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter25_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter26_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter26_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter27_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter27_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter28_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter28_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter29_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter29_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter30_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter29_reg = ap_const_logic_0)) or ((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1)))) then 
                ap_loop_exit_ready_pp0_iter30_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    i_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_186 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln165_reg_1220 = ap_const_lv1_0))) then 
                i_fu_186 <= select_ln165_4_fu_497_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_fu_190 <= ap_const_lv19_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln165_reg_1220 = ap_const_lv1_0))) then 
                indvar_flatten_fu_190 <= add_ln165_fu_474_p2;
            end if; 
        end if;
    end process;

    j_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_182 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln165_reg_1220 = ap_const_lv1_0))) then 
                    j_fu_182 <= add_ln167_fu_660_p2;
                end if;
            end if; 
        end if;
    end process;

    jj_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    jj_fu_178 <= ap_const_lv11_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln165_reg_1220 = ap_const_lv1_0))) then 
                    jj_fu_178 <= add_ln167_1_fu_666_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_ln174_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_ln174_fu_174 <= ap_const_lv480_lc_1;
            elsif (((icmp_ln165_reg_1220_pp0_iter30_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
                phi_ln174_fu_174 <= select_ln174_fu_1138_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_fu_333_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln165_1_reg_1224 <= add_ln165_1_fu_339_p2;
                trunc_ln167_1_reg_1229 <= trunc_ln167_1_fu_345_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln165_reg_1220 = ap_const_lv1_0))) then
                add_ln169_2_reg_1295 <= add_ln169_2_fu_589_p2;
                add_ln169_6_reg_1306 <= add_ln169_6_fu_611_p2;
                add_ln169_8_reg_1316 <= add_ln169_8_fu_649_p2;
                icmp_ln174_reg_1321 <= icmp_ln174_fu_654_p2;
                trunc_ln169_8_reg_1311 <= add_ln169_5_fu_634_p2(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln169_2_reg_1295_pp0_iter10_reg <= add_ln169_2_reg_1295_pp0_iter9_reg;
                add_ln169_2_reg_1295_pp0_iter11_reg <= add_ln169_2_reg_1295_pp0_iter10_reg;
                add_ln169_2_reg_1295_pp0_iter12_reg <= add_ln169_2_reg_1295_pp0_iter11_reg;
                add_ln169_2_reg_1295_pp0_iter13_reg <= add_ln169_2_reg_1295_pp0_iter12_reg;
                add_ln169_2_reg_1295_pp0_iter14_reg <= add_ln169_2_reg_1295_pp0_iter13_reg;
                add_ln169_2_reg_1295_pp0_iter15_reg <= add_ln169_2_reg_1295_pp0_iter14_reg;
                add_ln169_2_reg_1295_pp0_iter16_reg <= add_ln169_2_reg_1295_pp0_iter15_reg;
                add_ln169_2_reg_1295_pp0_iter17_reg <= add_ln169_2_reg_1295_pp0_iter16_reg;
                add_ln169_2_reg_1295_pp0_iter18_reg <= add_ln169_2_reg_1295_pp0_iter17_reg;
                add_ln169_2_reg_1295_pp0_iter19_reg <= add_ln169_2_reg_1295_pp0_iter18_reg;
                add_ln169_2_reg_1295_pp0_iter20_reg <= add_ln169_2_reg_1295_pp0_iter19_reg;
                add_ln169_2_reg_1295_pp0_iter21_reg <= add_ln169_2_reg_1295_pp0_iter20_reg;
                add_ln169_2_reg_1295_pp0_iter22_reg <= add_ln169_2_reg_1295_pp0_iter21_reg;
                add_ln169_2_reg_1295_pp0_iter23_reg <= add_ln169_2_reg_1295_pp0_iter22_reg;
                add_ln169_2_reg_1295_pp0_iter24_reg <= add_ln169_2_reg_1295_pp0_iter23_reg;
                add_ln169_2_reg_1295_pp0_iter2_reg <= add_ln169_2_reg_1295;
                add_ln169_2_reg_1295_pp0_iter3_reg <= add_ln169_2_reg_1295_pp0_iter2_reg;
                add_ln169_2_reg_1295_pp0_iter4_reg <= add_ln169_2_reg_1295_pp0_iter3_reg;
                add_ln169_2_reg_1295_pp0_iter5_reg <= add_ln169_2_reg_1295_pp0_iter4_reg;
                add_ln169_2_reg_1295_pp0_iter6_reg <= add_ln169_2_reg_1295_pp0_iter5_reg;
                add_ln169_2_reg_1295_pp0_iter7_reg <= add_ln169_2_reg_1295_pp0_iter6_reg;
                add_ln169_2_reg_1295_pp0_iter8_reg <= add_ln169_2_reg_1295_pp0_iter7_reg;
                add_ln169_2_reg_1295_pp0_iter9_reg <= add_ln169_2_reg_1295_pp0_iter8_reg;
                add_ln169_6_reg_1306_pp0_iter10_reg <= add_ln169_6_reg_1306_pp0_iter9_reg;
                add_ln169_6_reg_1306_pp0_iter11_reg <= add_ln169_6_reg_1306_pp0_iter10_reg;
                add_ln169_6_reg_1306_pp0_iter12_reg <= add_ln169_6_reg_1306_pp0_iter11_reg;
                add_ln169_6_reg_1306_pp0_iter13_reg <= add_ln169_6_reg_1306_pp0_iter12_reg;
                add_ln169_6_reg_1306_pp0_iter14_reg <= add_ln169_6_reg_1306_pp0_iter13_reg;
                add_ln169_6_reg_1306_pp0_iter15_reg <= add_ln169_6_reg_1306_pp0_iter14_reg;
                add_ln169_6_reg_1306_pp0_iter16_reg <= add_ln169_6_reg_1306_pp0_iter15_reg;
                add_ln169_6_reg_1306_pp0_iter17_reg <= add_ln169_6_reg_1306_pp0_iter16_reg;
                add_ln169_6_reg_1306_pp0_iter18_reg <= add_ln169_6_reg_1306_pp0_iter17_reg;
                add_ln169_6_reg_1306_pp0_iter19_reg <= add_ln169_6_reg_1306_pp0_iter18_reg;
                add_ln169_6_reg_1306_pp0_iter20_reg <= add_ln169_6_reg_1306_pp0_iter19_reg;
                add_ln169_6_reg_1306_pp0_iter21_reg <= add_ln169_6_reg_1306_pp0_iter20_reg;
                add_ln169_6_reg_1306_pp0_iter22_reg <= add_ln169_6_reg_1306_pp0_iter21_reg;
                add_ln169_6_reg_1306_pp0_iter23_reg <= add_ln169_6_reg_1306_pp0_iter22_reg;
                add_ln169_6_reg_1306_pp0_iter24_reg <= add_ln169_6_reg_1306_pp0_iter23_reg;
                add_ln169_6_reg_1306_pp0_iter2_reg <= add_ln169_6_reg_1306;
                add_ln169_6_reg_1306_pp0_iter3_reg <= add_ln169_6_reg_1306_pp0_iter2_reg;
                add_ln169_6_reg_1306_pp0_iter4_reg <= add_ln169_6_reg_1306_pp0_iter3_reg;
                add_ln169_6_reg_1306_pp0_iter5_reg <= add_ln169_6_reg_1306_pp0_iter4_reg;
                add_ln169_6_reg_1306_pp0_iter6_reg <= add_ln169_6_reg_1306_pp0_iter5_reg;
                add_ln169_6_reg_1306_pp0_iter7_reg <= add_ln169_6_reg_1306_pp0_iter6_reg;
                add_ln169_6_reg_1306_pp0_iter8_reg <= add_ln169_6_reg_1306_pp0_iter7_reg;
                add_ln169_6_reg_1306_pp0_iter9_reg <= add_ln169_6_reg_1306_pp0_iter8_reg;
                add_ln169_8_reg_1316_pp0_iter10_reg <= add_ln169_8_reg_1316_pp0_iter9_reg;
                add_ln169_8_reg_1316_pp0_iter11_reg <= add_ln169_8_reg_1316_pp0_iter10_reg;
                add_ln169_8_reg_1316_pp0_iter12_reg <= add_ln169_8_reg_1316_pp0_iter11_reg;
                add_ln169_8_reg_1316_pp0_iter13_reg <= add_ln169_8_reg_1316_pp0_iter12_reg;
                add_ln169_8_reg_1316_pp0_iter14_reg <= add_ln169_8_reg_1316_pp0_iter13_reg;
                add_ln169_8_reg_1316_pp0_iter15_reg <= add_ln169_8_reg_1316_pp0_iter14_reg;
                add_ln169_8_reg_1316_pp0_iter16_reg <= add_ln169_8_reg_1316_pp0_iter15_reg;
                add_ln169_8_reg_1316_pp0_iter17_reg <= add_ln169_8_reg_1316_pp0_iter16_reg;
                add_ln169_8_reg_1316_pp0_iter18_reg <= add_ln169_8_reg_1316_pp0_iter17_reg;
                add_ln169_8_reg_1316_pp0_iter19_reg <= add_ln169_8_reg_1316_pp0_iter18_reg;
                add_ln169_8_reg_1316_pp0_iter20_reg <= add_ln169_8_reg_1316_pp0_iter19_reg;
                add_ln169_8_reg_1316_pp0_iter21_reg <= add_ln169_8_reg_1316_pp0_iter20_reg;
                add_ln169_8_reg_1316_pp0_iter22_reg <= add_ln169_8_reg_1316_pp0_iter21_reg;
                add_ln169_8_reg_1316_pp0_iter23_reg <= add_ln169_8_reg_1316_pp0_iter22_reg;
                add_ln169_8_reg_1316_pp0_iter24_reg <= add_ln169_8_reg_1316_pp0_iter23_reg;
                add_ln169_8_reg_1316_pp0_iter2_reg <= add_ln169_8_reg_1316;
                add_ln169_8_reg_1316_pp0_iter3_reg <= add_ln169_8_reg_1316_pp0_iter2_reg;
                add_ln169_8_reg_1316_pp0_iter4_reg <= add_ln169_8_reg_1316_pp0_iter3_reg;
                add_ln169_8_reg_1316_pp0_iter5_reg <= add_ln169_8_reg_1316_pp0_iter4_reg;
                add_ln169_8_reg_1316_pp0_iter6_reg <= add_ln169_8_reg_1316_pp0_iter5_reg;
                add_ln169_8_reg_1316_pp0_iter7_reg <= add_ln169_8_reg_1316_pp0_iter6_reg;
                add_ln169_8_reg_1316_pp0_iter8_reg <= add_ln169_8_reg_1316_pp0_iter7_reg;
                add_ln169_8_reg_1316_pp0_iter9_reg <= add_ln169_8_reg_1316_pp0_iter8_reg;
                i_1_reg_1204 <= ap_sig_allocacmp_i_1;
                icmp_ln165_reg_1220 <= icmp_ln165_fu_333_p2;
                icmp_ln165_reg_1220_pp0_iter10_reg <= icmp_ln165_reg_1220_pp0_iter9_reg;
                icmp_ln165_reg_1220_pp0_iter11_reg <= icmp_ln165_reg_1220_pp0_iter10_reg;
                icmp_ln165_reg_1220_pp0_iter12_reg <= icmp_ln165_reg_1220_pp0_iter11_reg;
                icmp_ln165_reg_1220_pp0_iter13_reg <= icmp_ln165_reg_1220_pp0_iter12_reg;
                icmp_ln165_reg_1220_pp0_iter14_reg <= icmp_ln165_reg_1220_pp0_iter13_reg;
                icmp_ln165_reg_1220_pp0_iter15_reg <= icmp_ln165_reg_1220_pp0_iter14_reg;
                icmp_ln165_reg_1220_pp0_iter16_reg <= icmp_ln165_reg_1220_pp0_iter15_reg;
                icmp_ln165_reg_1220_pp0_iter17_reg <= icmp_ln165_reg_1220_pp0_iter16_reg;
                icmp_ln165_reg_1220_pp0_iter18_reg <= icmp_ln165_reg_1220_pp0_iter17_reg;
                icmp_ln165_reg_1220_pp0_iter19_reg <= icmp_ln165_reg_1220_pp0_iter18_reg;
                icmp_ln165_reg_1220_pp0_iter1_reg <= icmp_ln165_reg_1220;
                icmp_ln165_reg_1220_pp0_iter20_reg <= icmp_ln165_reg_1220_pp0_iter19_reg;
                icmp_ln165_reg_1220_pp0_iter21_reg <= icmp_ln165_reg_1220_pp0_iter20_reg;
                icmp_ln165_reg_1220_pp0_iter22_reg <= icmp_ln165_reg_1220_pp0_iter21_reg;
                icmp_ln165_reg_1220_pp0_iter23_reg <= icmp_ln165_reg_1220_pp0_iter22_reg;
                icmp_ln165_reg_1220_pp0_iter24_reg <= icmp_ln165_reg_1220_pp0_iter23_reg;
                icmp_ln165_reg_1220_pp0_iter25_reg <= icmp_ln165_reg_1220_pp0_iter24_reg;
                icmp_ln165_reg_1220_pp0_iter26_reg <= icmp_ln165_reg_1220_pp0_iter25_reg;
                icmp_ln165_reg_1220_pp0_iter27_reg <= icmp_ln165_reg_1220_pp0_iter26_reg;
                icmp_ln165_reg_1220_pp0_iter28_reg <= icmp_ln165_reg_1220_pp0_iter27_reg;
                icmp_ln165_reg_1220_pp0_iter29_reg <= icmp_ln165_reg_1220_pp0_iter28_reg;
                icmp_ln165_reg_1220_pp0_iter2_reg <= icmp_ln165_reg_1220_pp0_iter1_reg;
                icmp_ln165_reg_1220_pp0_iter30_reg <= icmp_ln165_reg_1220_pp0_iter29_reg;
                icmp_ln165_reg_1220_pp0_iter3_reg <= icmp_ln165_reg_1220_pp0_iter2_reg;
                icmp_ln165_reg_1220_pp0_iter4_reg <= icmp_ln165_reg_1220_pp0_iter3_reg;
                icmp_ln165_reg_1220_pp0_iter5_reg <= icmp_ln165_reg_1220_pp0_iter4_reg;
                icmp_ln165_reg_1220_pp0_iter6_reg <= icmp_ln165_reg_1220_pp0_iter5_reg;
                icmp_ln165_reg_1220_pp0_iter7_reg <= icmp_ln165_reg_1220_pp0_iter6_reg;
                icmp_ln165_reg_1220_pp0_iter8_reg <= icmp_ln165_reg_1220_pp0_iter7_reg;
                icmp_ln165_reg_1220_pp0_iter9_reg <= icmp_ln165_reg_1220_pp0_iter8_reg;
                icmp_ln174_reg_1321_pp0_iter10_reg <= icmp_ln174_reg_1321_pp0_iter9_reg;
                icmp_ln174_reg_1321_pp0_iter11_reg <= icmp_ln174_reg_1321_pp0_iter10_reg;
                icmp_ln174_reg_1321_pp0_iter12_reg <= icmp_ln174_reg_1321_pp0_iter11_reg;
                icmp_ln174_reg_1321_pp0_iter13_reg <= icmp_ln174_reg_1321_pp0_iter12_reg;
                icmp_ln174_reg_1321_pp0_iter14_reg <= icmp_ln174_reg_1321_pp0_iter13_reg;
                icmp_ln174_reg_1321_pp0_iter15_reg <= icmp_ln174_reg_1321_pp0_iter14_reg;
                icmp_ln174_reg_1321_pp0_iter16_reg <= icmp_ln174_reg_1321_pp0_iter15_reg;
                icmp_ln174_reg_1321_pp0_iter17_reg <= icmp_ln174_reg_1321_pp0_iter16_reg;
                icmp_ln174_reg_1321_pp0_iter18_reg <= icmp_ln174_reg_1321_pp0_iter17_reg;
                icmp_ln174_reg_1321_pp0_iter19_reg <= icmp_ln174_reg_1321_pp0_iter18_reg;
                icmp_ln174_reg_1321_pp0_iter20_reg <= icmp_ln174_reg_1321_pp0_iter19_reg;
                icmp_ln174_reg_1321_pp0_iter21_reg <= icmp_ln174_reg_1321_pp0_iter20_reg;
                icmp_ln174_reg_1321_pp0_iter22_reg <= icmp_ln174_reg_1321_pp0_iter21_reg;
                icmp_ln174_reg_1321_pp0_iter23_reg <= icmp_ln174_reg_1321_pp0_iter22_reg;
                icmp_ln174_reg_1321_pp0_iter24_reg <= icmp_ln174_reg_1321_pp0_iter23_reg;
                icmp_ln174_reg_1321_pp0_iter25_reg <= icmp_ln174_reg_1321_pp0_iter24_reg;
                icmp_ln174_reg_1321_pp0_iter26_reg <= icmp_ln174_reg_1321_pp0_iter25_reg;
                icmp_ln174_reg_1321_pp0_iter27_reg <= icmp_ln174_reg_1321_pp0_iter26_reg;
                icmp_ln174_reg_1321_pp0_iter28_reg <= icmp_ln174_reg_1321_pp0_iter27_reg;
                icmp_ln174_reg_1321_pp0_iter29_reg <= icmp_ln174_reg_1321_pp0_iter28_reg;
                icmp_ln174_reg_1321_pp0_iter2_reg <= icmp_ln174_reg_1321;
                icmp_ln174_reg_1321_pp0_iter30_reg <= icmp_ln174_reg_1321_pp0_iter29_reg;
                icmp_ln174_reg_1321_pp0_iter3_reg <= icmp_ln174_reg_1321_pp0_iter2_reg;
                icmp_ln174_reg_1321_pp0_iter4_reg <= icmp_ln174_reg_1321_pp0_iter3_reg;
                icmp_ln174_reg_1321_pp0_iter5_reg <= icmp_ln174_reg_1321_pp0_iter4_reg;
                icmp_ln174_reg_1321_pp0_iter6_reg <= icmp_ln174_reg_1321_pp0_iter5_reg;
                icmp_ln174_reg_1321_pp0_iter7_reg <= icmp_ln174_reg_1321_pp0_iter6_reg;
                icmp_ln174_reg_1321_pp0_iter8_reg <= icmp_ln174_reg_1321_pp0_iter7_reg;
                icmp_ln174_reg_1321_pp0_iter9_reg <= icmp_ln174_reg_1321_pp0_iter8_reg;
                indvar_flatten_load_reg_1209 <= ap_sig_allocacmp_indvar_flatten_load;
                trunc_ln167_reg_1214 <= trunc_ln167_fu_329_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln165_reg_1220 = ap_const_lv1_0))) then
                add_ln169_7_reg_1285 <= add_ln169_7_fu_552_p2;
                trunc_ln169_10_reg_1290 <= trunc_ln169_10_fu_558_p1;
                trunc_ln169_5_reg_1280 <= add_ln169_4_fu_537_p2(63 downto 6);
                trunc_ln169_6_reg_1275 <= trunc_ln169_6_fu_533_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1220_pp0_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln515_reg_1449 <= add_ln515_fu_996_p2;
                isNeg_reg_1454 <= add_ln515_fu_996_p2(11 downto 11);
                p_Result_4_reg_1439 <= data_V_2_fu_966_p1(63 downto 63);
                p_Result_5_reg_1444 <= p_Result_5_fu_988_p1;
                sub_ln1512_reg_1460 <= sub_ln1512_fu_1010_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1220_pp0_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                data_V_reg_1402 <= data_V_fu_754_p1;
                dc_reg_1397 <= dc_fu_272_p1;
                p_Result_s_reg_1407 <= data_V_fu_754_p1(63 downto 63);
                trunc_ln368_reg_1434 <= trunc_ln368_fu_795_p1;
                xs_exp_V_4_reg_1415 <= data_V_fu_754_p1(62 downto 52);
                xs_sig_V_3_reg_1423 <= xs_sig_V_3_fu_776_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1220_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem_addr_1_read_reg_1332 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                gmem_addr_2_read_reg_1342 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                gmem_addr_3_read_reg_1352 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln165_reg_1220 = ap_const_lv1_0))) then
                icmp_ln167_reg_1240 <= icmp_ln167_fu_383_p2;
                j_load_reg_1235 <= j_fu_182;
                select_ln165_1_reg_1247 <= select_ln165_1_fu_389_p3;
                    select_ln165_3_reg_1253(20 downto 9) <= select_ln165_3_fu_425_p3(20 downto 9);
                trunc_ln169_2_reg_1264 <= add_ln169_1_fu_459_p2(63 downto 6);
                trunc_ln169_reg_1259 <= trunc_ln169_fu_455_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln167_reg_1240_pp0_iter10_reg <= icmp_ln167_reg_1240_pp0_iter9_reg;
                icmp_ln167_reg_1240_pp0_iter11_reg <= icmp_ln167_reg_1240_pp0_iter10_reg;
                icmp_ln167_reg_1240_pp0_iter12_reg <= icmp_ln167_reg_1240_pp0_iter11_reg;
                icmp_ln167_reg_1240_pp0_iter13_reg <= icmp_ln167_reg_1240_pp0_iter12_reg;
                icmp_ln167_reg_1240_pp0_iter14_reg <= icmp_ln167_reg_1240_pp0_iter13_reg;
                icmp_ln167_reg_1240_pp0_iter15_reg <= icmp_ln167_reg_1240_pp0_iter14_reg;
                icmp_ln167_reg_1240_pp0_iter16_reg <= icmp_ln167_reg_1240_pp0_iter15_reg;
                icmp_ln167_reg_1240_pp0_iter17_reg <= icmp_ln167_reg_1240_pp0_iter16_reg;
                icmp_ln167_reg_1240_pp0_iter18_reg <= icmp_ln167_reg_1240_pp0_iter17_reg;
                icmp_ln167_reg_1240_pp0_iter19_reg <= icmp_ln167_reg_1240_pp0_iter18_reg;
                icmp_ln167_reg_1240_pp0_iter1_reg <= icmp_ln167_reg_1240;
                icmp_ln167_reg_1240_pp0_iter20_reg <= icmp_ln167_reg_1240_pp0_iter19_reg;
                icmp_ln167_reg_1240_pp0_iter21_reg <= icmp_ln167_reg_1240_pp0_iter20_reg;
                icmp_ln167_reg_1240_pp0_iter22_reg <= icmp_ln167_reg_1240_pp0_iter21_reg;
                icmp_ln167_reg_1240_pp0_iter23_reg <= icmp_ln167_reg_1240_pp0_iter22_reg;
                icmp_ln167_reg_1240_pp0_iter24_reg <= icmp_ln167_reg_1240_pp0_iter23_reg;
                icmp_ln167_reg_1240_pp0_iter25_reg <= icmp_ln167_reg_1240_pp0_iter24_reg;
                icmp_ln167_reg_1240_pp0_iter26_reg <= icmp_ln167_reg_1240_pp0_iter25_reg;
                icmp_ln167_reg_1240_pp0_iter27_reg <= icmp_ln167_reg_1240_pp0_iter26_reg;
                icmp_ln167_reg_1240_pp0_iter28_reg <= icmp_ln167_reg_1240_pp0_iter27_reg;
                icmp_ln167_reg_1240_pp0_iter29_reg <= icmp_ln167_reg_1240_pp0_iter28_reg;
                icmp_ln167_reg_1240_pp0_iter2_reg <= icmp_ln167_reg_1240_pp0_iter1_reg;
                icmp_ln167_reg_1240_pp0_iter3_reg <= icmp_ln167_reg_1240_pp0_iter2_reg;
                icmp_ln167_reg_1240_pp0_iter4_reg <= icmp_ln167_reg_1240_pp0_iter3_reg;
                icmp_ln167_reg_1240_pp0_iter5_reg <= icmp_ln167_reg_1240_pp0_iter4_reg;
                icmp_ln167_reg_1240_pp0_iter6_reg <= icmp_ln167_reg_1240_pp0_iter5_reg;
                icmp_ln167_reg_1240_pp0_iter7_reg <= icmp_ln167_reg_1240_pp0_iter6_reg;
                icmp_ln167_reg_1240_pp0_iter8_reg <= icmp_ln167_reg_1240_pp0_iter7_reg;
                icmp_ln167_reg_1240_pp0_iter9_reg <= icmp_ln167_reg_1240_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1220_pp0_iter26_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then
                mul2_reg_1387 <= grp_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (icmp_ln165_reg_1220_pp0_iter26_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_reg_1377 <= grp_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1220_pp0_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                result_V_reg_1476 <= result_V_fu_1108_p3;
                select_ln165_2_reg_1470 <= select_ln165_2_fu_1024_p3;
            end if;
        end if;
    end process;
    select_ln165_3_reg_1253(8 downto 0) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter30_stage0, ap_block_pp0_stage1_subdone, ap_idle_pp0_0to29, ap_idle_pp0_1to30, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter30_stage0) and (ap_idle_pp0_0to29 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to30 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln165_1_fu_339_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv10_1));
    add_ln165_fu_474_p2 <= std_logic_vector(unsigned(indvar_flatten_load_reg_1209) + unsigned(ap_const_lv19_1));
    add_ln167_1_fu_666_p2 <= std_logic_vector(unsigned(select_ln165_1_reg_1247) + unsigned(ap_const_lv11_3));
    add_ln167_fu_660_p2 <= std_logic_vector(unsigned(select_ln165_fu_572_p3) + unsigned(ap_const_lv10_1));
    add_ln169_1_fu_459_p2 <= std_logic_vector(signed(sext_ln169_3_fu_451_p1) + signed(input_image));
    add_ln169_2_fu_589_p2 <= std_logic_vector(unsigned(trunc_ln169_1_fu_582_p3) + unsigned(trunc_ln1));
    add_ln169_3_fu_515_p2 <= std_logic_vector(unsigned(zext_ln169_fu_502_p1) + unsigned(sext_ln165_1_fu_484_p1));
    add_ln169_4_fu_537_p2 <= std_logic_vector(signed(sext_ln169_4_fu_529_p1) + signed(input_image));
    add_ln169_5_fu_634_p2 <= std_logic_vector(signed(sext_ln169_5_fu_623_p1) + signed(input_image));
    add_ln169_6_fu_611_p2 <= std_logic_vector(unsigned(trunc_ln169_4_fu_594_p3) + unsigned(trunc_ln1));
    add_ln169_7_fu_552_p2 <= std_logic_vector(unsigned(zext_ln169_fu_502_p1) + unsigned(sext_ln165_2_fu_493_p1));
    add_ln169_8_fu_649_p2 <= std_logic_vector(unsigned(trunc_ln169_7_fu_627_p3) + unsigned(trunc_ln1));
    add_ln169_fu_437_p2 <= std_logic_vector(unsigned(zext_ln169_1_fu_433_p1) + unsigned(select_ln165_3_fu_425_p3));
    add_ln515_fu_996_p2 <= std_logic_vector(unsigned(zext_ln515_fu_992_p1) + unsigned(ap_const_lv12_C01));
    and_ln1035_fu_953_p2 <= (xor_ln1035_fu_947_p2 and icmp_ln1035_1_fu_804_p2);
    and_ln19_1_fu_933_p2 <= (icmp_ln1035_fu_799_p2 and and_ln19_fu_928_p2);
    and_ln19_fu_928_p2 <= (p_Result_s_reg_1407 and or_ln19_fu_922_p2);
    and_ln779_fu_847_p2 <= (data_V_reg_1402 and data_V_1_fu_827_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter24, m_axi_gmem_RVALID, icmp_ln165_reg_1220_pp0_iter23_reg, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln165_reg_1220_pp0_iter23_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter24, m_axi_gmem_RVALID, icmp_ln165_reg_1220_pp0_iter23_reg, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln165_reg_1220_pp0_iter23_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter24, m_axi_gmem_RVALID, icmp_ln165_reg_1220_pp0_iter24_reg)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter30, m_axi_gmem_RVALID, icmp_ln165_reg_1220_pp0_iter24_reg, ap_block_state5_io, ap_block_state92_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_const_boolean_1 = ap_block_state92_io) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter30, m_axi_gmem_RVALID, icmp_ln165_reg_1220_pp0_iter24_reg, ap_block_state5_io, ap_block_state92_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_const_boolean_1 = ap_block_state92_io) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter24, m_axi_gmem_RVALID, ap_block_state3_io, icmp_ln165_reg_1220_pp0_iter24_reg)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter24, m_axi_gmem_RVALID, ap_block_state3_io, icmp_ln165_reg_1220_pp0_iter24_reg)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;

        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage2_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage2_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln165_reg_1220)
    begin
                ap_block_state3_io <= ((icmp_ln165_reg_1220 = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage2_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage2_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage2_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln165_reg_1220)
    begin
                ap_block_state4_io <= ((icmp_ln165_reg_1220 = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage2_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage2_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage2_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln165_reg_1220_pp0_iter1_reg)
    begin
                ap_block_state5_io <= ((icmp_ln165_reg_1220_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage2_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage1_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage2_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage1_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage2_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage1_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage2_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage1_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage2_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state73_pp0_stage0_iter24_assign_proc : process(m_axi_gmem_RVALID, icmp_ln165_reg_1220_pp0_iter23_reg)
    begin
                ap_block_state73_pp0_stage0_iter24 <= ((icmp_ln165_reg_1220_pp0_iter23_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;


    ap_block_state74_pp0_stage1_iter24_assign_proc : process(m_axi_gmem_RVALID, icmp_ln165_reg_1220_pp0_iter24_reg)
    begin
                ap_block_state74_pp0_stage1_iter24 <= ((icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;


    ap_block_state75_pp0_stage2_iter24_assign_proc : process(m_axi_gmem_RVALID, icmp_ln165_reg_1220_pp0_iter24_reg)
    begin
                ap_block_state75_pp0_stage2_iter24 <= ((icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state76_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage1_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage2_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage1_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage2_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp0_stage1_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp0_stage2_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp0_stage1_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp0_stage2_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp0_stage1_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp0_stage2_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state92_io_assign_proc : process(m_axi_gmem_WREADY, ap_predicate_op511_write_state92)
    begin
                ap_block_state92_io <= ((ap_predicate_op511_write_state92 = ap_const_boolean_1) and (m_axi_gmem_WREADY = ap_const_logic_0));
    end process;

        ap_block_state92_pp0_stage1_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln165_reg_1220, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln165_reg_1220 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter30_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter30, icmp_ln165_reg_1220_pp0_iter29_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln165_reg_1220_pp0_iter29_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter30_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter30_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter30_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter30_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to29_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_0to29 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to30_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_1to30 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to30 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_predicate_op511_write_state92_assign_proc : process(icmp_ln165_reg_1220_pp0_iter30_reg, icmp_ln174_reg_1321_pp0_iter30_reg)
    begin
                ap_predicate_op511_write_state92 <= ((icmp_ln174_reg_1321_pp0_iter30_reg = ap_const_lv1_1) and (icmp_ln165_reg_1220_pp0_iter30_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_186)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_186;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_190)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv19_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_190;
        end if; 
    end process;

    b_fu_749_p1 <= lshr_ln169_2_fu_744_p2(32 - 1 downto 0);
    bitcast_ln1035_fu_908_p1 <= select_ln1035_fu_900_p3;
    data_V_1_fu_827_p2 <= std_logic_vector(unsigned(zext_ln28_fu_816_p1) + unsigned(p_Result_2_fu_820_p3));
    data_V_2_fu_966_p1 <= dc_1_fu_959_p3;
    data_V_fu_754_p1 <= dc_fu_272_p1;
    dc_1_fu_959_p3 <= 
        dc_reg_1397 when (and_ln1035_fu_953_p2(0) = '1') else 
        select_ln19_fu_939_p3;
    empty_21_fu_578_p1 <= select_ln165_fu_572_p3(4 - 1 downto 0);
    g_fu_728_p1 <= lshr_ln169_1_fu_723_p2(32 - 1 downto 0);

    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, m_axi_gmem_ARREADY, icmp_ln165_reg_1220, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0, icmp_ln165_reg_1220_pp0_iter1_reg)
    begin
        if ((((icmp_ln165_reg_1220_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln165_reg_1220 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln165_reg_1220 = ap_const_lv1_0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, ap_CS_fsm_pp0_stage2, m_axi_gmem_RVALID, icmp_ln165_reg_1220_pp0_iter24_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0, icmp_ln165_reg_1220_pp0_iter23_reg)
    begin
        if ((((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln165_reg_1220_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter30, m_axi_gmem_WREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, icmp_ln165_reg_1220_pp0_iter30_reg, icmp_ln174_reg_1321_pp0_iter30_reg)
    begin
        if (((icmp_ln174_reg_1321_pp0_iter30_reg = ap_const_lv1_1) and (icmp_ln165_reg_1220_pp0_iter30_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_276_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_276_ce <= ap_const_logic_1;
        else 
            grp_fu_276_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_276_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage0, mul_reg_1377, grp_fu_276_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_276_p0 <= grp_fu_276_p2;
        elsif (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_276_p0 <= mul_reg_1377;
        else 
            grp_fu_276_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_276_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter28, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage0, grp_fu_282_p2, mul2_reg_1387)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            grp_fu_276_p1 <= mul2_reg_1387;
        elsif (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_276_p1 <= grp_fu_282_p2;
        else 
            grp_fu_276_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_282_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_282_ce <= ap_const_logic_1;
        else 
            grp_fu_282_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_282_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_282_p1 <= ap_const_lv64_3FBD2F1A9FBE76C9;
        elsif (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_282_p1 <= ap_const_lv64_3FE2C8B439581062;
        elsif (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_282_p1 <= ap_const_lv64_3FD322D0E5604189;
        else 
            grp_fu_282_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_290_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_290_ce <= ap_const_logic_1;
        else 
            grp_fu_290_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_290_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0, r_fu_707_p1, g_fu_728_p1, b_fu_749_p1)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_290_p0 <= b_fu_749_p1;
        elsif (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_290_p0 <= g_fu_728_p1;
        elsif (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_290_p0 <= r_fu_707_p1;
        else 
            grp_fu_290_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1035_1_fu_804_p2 <= "1" when (unsigned(xs_exp_V_4_reg_1415) > unsigned(ap_const_lv11_433)) else "0";
    icmp_ln1035_fu_799_p2 <= "1" when (unsigned(xs_exp_V_4_reg_1415) < unsigned(ap_const_lv11_3FF)) else "0";
    icmp_ln165_fu_333_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv19_40000) else "0";
    icmp_ln167_fu_383_p2 <= "1" when (j_fu_182 = ap_const_lv10_200) else "0";
    icmp_ln174_fu_654_p2 <= "1" when (empty_21_fu_578_p1 = ap_const_lv4_F) else "0";
    icmp_ln19_1_fu_917_p2 <= "0" when (xs_exp_V_4_reg_1415 = ap_const_lv11_0) else "1";
    icmp_ln19_fu_912_p2 <= "0" when (xs_sig_V_3_reg_1423 = ap_const_lv52_0) else "1";
    index_fu_780_p4 <= data_V_fu_754_p1(57 downto 52);
    lshr_ln169_1_fu_723_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_2_read_reg_1342),to_integer(unsigned('0' & zext_ln169_3_fu_719_p1(31-1 downto 0)))));
    lshr_ln169_2_fu_744_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_3_read_reg_1352),to_integer(unsigned('0' & zext_ln169_4_fu_740_p1(31-1 downto 0)))));
    lshr_ln169_fu_702_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_1_read_reg_1332),to_integer(unsigned('0' & zext_ln169_2_fu_698_p1(31-1 downto 0)))));

    m_axi_gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, icmp_ln165_reg_1220, ap_CS_fsm_pp0_stage1, icmp_ln165_reg_1220_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, sext_ln169_fu_505_p1, sext_ln169_1_fu_601_p1, sext_ln169_2_fu_681_p1)
    begin
        if (((icmp_ln165_reg_1220_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_gmem_ARADDR <= sext_ln169_2_fu_681_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln165_reg_1220 = ap_const_lv1_0))) then 
            m_axi_gmem_ARADDR <= sext_ln169_1_fu_601_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln165_reg_1220 = ap_const_lv1_0))) then 
            m_axi_gmem_ARADDR <= sext_ln169_fu_505_p1;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, icmp_ln165_reg_1220, ap_CS_fsm_pp0_stage1, icmp_ln165_reg_1220_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((icmp_ln165_reg_1220_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln165_reg_1220 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln165_reg_1220 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, ap_CS_fsm_pp0_stage2, icmp_ln165_reg_1220_pp0_iter24_reg, ap_CS_fsm_pp0_stage1, icmp_ln165_reg_1220_pp0_iter23_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln165_reg_1220_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln165_reg_1220_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= (result_V_reg_1476 & select_ln165_2_reg_1470);
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter30, ap_CS_fsm_pp0_stage1, ap_predicate_op511_write_state92, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op511_write_state92 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mantissa_fu_1031_p4 <= ((ap_const_lv1_1 & p_Result_5_reg_1444) & ap_const_lv1_0);
    mask_table_address0 <= zext_ln541_fu_790_p1(6 - 1 downto 0);

    mask_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter29, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            mask_table_ce0 <= ap_const_logic_1;
        else 
            mask_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1035_fu_894_p2 <= (icmp_ln1035_fu_799_p2 or icmp_ln1035_1_fu_804_p2);
    or_ln165_1_fu_488_p2 <= (select_ln165_3_reg_1253 or ap_const_lv21_2);
    or_ln165_fu_479_p2 <= (select_ln165_3_reg_1253 or ap_const_lv21_1);
    or_ln19_fu_922_p2 <= (icmp_ln19_fu_912_p2 or icmp_ln19_1_fu_917_p2);
    p_Result_1_fu_809_p3 <= (p_Result_s_reg_1407 & ap_const_lv63_0);
    p_Result_2_fu_820_p3 <= (ap_const_lv1_1 & trunc_ln368_reg_1434);
    p_Result_3_fu_884_p4 <= ((xs_sign_V_1_fu_852_p3 & xs_exp_V_5_fu_860_p3) & xs_sig_V_4_fu_878_p2);
    p_Result_5_fu_988_p1 <= data_V_2_fu_966_p1(52 - 1 downto 0);
    r_V_1_fu_1067_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_1040_p1),to_integer(unsigned('0' & zext_ln1488_fu_1057_p1(31-1 downto 0)))));
    r_V_fu_1061_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_1040_p1),to_integer(unsigned('0' & zext_ln1488_fu_1057_p1(31-1 downto 0)))));
    r_fu_707_p1 <= lshr_ln169_fu_702_p2(32 - 1 downto 0);
    result_V_2_fu_1102_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_fu_1095_p3));
    result_V_fu_1108_p3 <= 
        result_V_2_fu_1102_p2 when (p_Result_4_reg_1439(0) = '1') else 
        val_fu_1095_p3;
    select_ln1035_fu_900_p3 <= 
        p_Result_1_fu_809_p3 when (or_ln1035_fu_894_p2(0) = '1') else 
        p_Result_3_fu_884_p4;
    select_ln165_1_fu_389_p3 <= 
        ap_const_lv11_0 when (icmp_ln167_fu_383_p2(0) = '1') else 
        jj_fu_178;
    select_ln165_2_fu_1024_p3 <= 
        ap_const_lv480_lc_1 when (icmp_ln167_reg_1240_pp0_iter29_reg(0) = '1') else 
        phi_ln174_fu_174;
    select_ln165_3_fu_425_p3 <= 
        sub_ln169_1_fu_419_p2 when (icmp_ln167_fu_383_p2(0) = '1') else 
        sub_ln169_fu_371_p2;
    select_ln165_4_fu_497_p3 <= 
        add_ln165_1_reg_1224 when (icmp_ln167_reg_1240(0) = '1') else 
        i_1_reg_1204;
    select_ln165_fu_572_p3 <= 
        ap_const_lv10_0 when (icmp_ln167_reg_1240(0) = '1') else 
        j_load_reg_1235;
    select_ln174_fu_1138_p3 <= 
        ap_const_lv480_lc_1 when (icmp_ln174_reg_1321_pp0_iter30_reg(0) = '1') else 
        tmp_2_fu_1131_p3;
    select_ln19_fu_939_p3 <= 
        ap_const_lv64_BFF0000000000000 when (and_ln19_1_fu_933_p2(0) = '1') else 
        bitcast_ln1035_fu_908_p1;
        sext_ln1488_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1047_p3),32));

        sext_ln1512_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_reg_1460),12));

        sext_ln165_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln165_fu_479_p2),22));

        sext_ln165_2_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln165_1_fu_488_p2),22));

        sext_ln169_1_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln169_5_reg_1280),64));

        sext_ln169_2_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln169_8_reg_1311),64));

        sext_ln169_3_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_443_p3),64));

        sext_ln169_4_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_521_p3),64));

        sext_ln169_5_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_616_p3),64));

        sext_ln169_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln169_2_reg_1264),64));

    shl_ln167_1_fu_360_p3 <= (trunc_ln167_reg_1214 & ap_const_lv9_0);
    shl_ln167_1_mid1_fu_408_p3 <= (trunc_ln167_1_reg_1229 & ap_const_lv9_0);
    shl_ln167_mid1_fu_397_p3 <= (trunc_ln167_1_reg_1229 & ap_const_lv11_0);
    shl_ln169_1_fu_691_p3 <= (add_ln169_2_reg_1295_pp0_iter24_reg & ap_const_lv3_0);
    shl_ln169_3_fu_712_p3 <= (add_ln169_6_reg_1306_pp0_iter24_reg & ap_const_lv3_0);
    shl_ln169_5_fu_733_p3 <= (add_ln169_8_reg_1316_pp0_iter24_reg & ap_const_lv3_0);
    shl_ln_fu_349_p3 <= (trunc_ln167_reg_1214 & ap_const_lv11_0);
    sub_ln1512_fu_1010_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_V_3_fu_978_p4));
    sub_ln169_1_fu_419_p2 <= std_logic_vector(unsigned(zext_ln167_2_fu_404_p1) - unsigned(zext_ln167_3_fu_415_p1));
    sub_ln169_fu_371_p2 <= std_logic_vector(unsigned(zext_ln167_fu_356_p1) - unsigned(zext_ln167_1_fu_367_p1));
    tmp_1_fu_1122_p4 <= select_ln165_2_reg_1470(479 downto 32);
    tmp_2_fu_1131_p3 <= (result_V_reg_1476 & tmp_1_fu_1122_p4);
    tmp_4_fu_443_p3 <= (add_ln169_fu_437_p2 & ap_const_lv2_0);
    tmp_6_fu_521_p3 <= (add_ln169_3_fu_515_p2 & ap_const_lv2_0);
    tmp_8_fu_616_p3 <= (add_ln169_7_reg_1285 & ap_const_lv2_0);
    tmp_fu_1073_p3 <= r_V_fu_1061_p2(53 downto 53);
    tmp_s_fu_1085_p4 <= r_V_1_fu_1067_p2(84 downto 53);
    trunc_ln167_1_fu_345_p1 <= add_ln165_1_fu_339_p2(9 - 1 downto 0);
    trunc_ln167_fu_329_p1 <= ap_sig_allocacmp_i_1(9 - 1 downto 0);
    trunc_ln169_10_fu_558_p1 <= add_ln169_7_fu_552_p2(4 - 1 downto 0);
    trunc_ln169_1_fu_582_p3 <= (trunc_ln169_reg_1259 & ap_const_lv2_0);
    trunc_ln169_4_fu_594_p3 <= (trunc_ln169_6_reg_1275 & ap_const_lv2_0);
    trunc_ln169_6_fu_533_p1 <= add_ln169_3_fu_515_p2(4 - 1 downto 0);
    trunc_ln169_7_fu_627_p3 <= (trunc_ln169_10_reg_1290 & ap_const_lv2_0);
    trunc_ln169_fu_455_p1 <= add_ln169_fu_437_p2(4 - 1 downto 0);
    trunc_ln368_fu_795_p1 <= data_V_fu_754_p1(63 - 1 downto 0);
    ush_fu_1047_p3 <= 
        sext_ln1512_fu_1044_p1 when (isNeg_reg_1454(0) = '1') else 
        add_ln515_reg_1449;
    val_fu_1095_p3 <= 
        zext_ln818_fu_1081_p1 when (isNeg_reg_1454(0) = '1') else 
        tmp_s_fu_1085_p4;
    xor_ln1035_fu_947_p2 <= (icmp_ln1035_fu_799_p2 xor ap_const_lv1_1);
    xor_ln1497_fu_872_p2 <= (mask_table_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    xs_exp_V_3_fu_978_p4 <= data_V_2_fu_966_p1(62 downto 52);
    xs_exp_V_5_fu_860_p3 <= 
        xs_exp_V_fu_833_p4 when (p_Result_s_reg_1407(0) = '1') else 
        xs_exp_V_4_reg_1415;
    xs_exp_V_fu_833_p4 <= data_V_1_fu_827_p2(62 downto 52);
    xs_sig_V_1_fu_866_p3 <= 
        xs_sig_V_fu_843_p1 when (p_Result_s_reg_1407(0) = '1') else 
        xs_sig_V_3_reg_1423;
    xs_sig_V_3_fu_776_p1 <= data_V_fu_754_p1(52 - 1 downto 0);
    xs_sig_V_4_fu_878_p2 <= (xs_sig_V_1_fu_866_p3 and xor_ln1497_fu_872_p2);
    xs_sig_V_fu_843_p1 <= data_V_1_fu_827_p2(52 - 1 downto 0);
    xs_sign_V_1_fu_852_p3 <= and_ln779_fu_847_p2(63 downto 63);
    zext_ln1488_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_1053_p1),137));
    zext_ln15_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1031_p4),137));
    zext_ln167_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln167_1_fu_360_p3),21));
    zext_ln167_2_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln167_mid1_fu_397_p3),21));
    zext_ln167_3_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln167_1_mid1_fu_408_p3),21));
    zext_ln167_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_349_p3),21));
    zext_ln169_1_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln165_1_fu_389_p3),21));
    zext_ln169_2_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln169_1_fu_691_p3),512));
    zext_ln169_3_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln169_3_fu_712_p3),512));
    zext_ln169_4_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln169_5_fu_733_p3),512));
    zext_ln169_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln165_1_reg_1247),22));
    zext_ln28_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table_q0),64));
    zext_ln515_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_3_fu_978_p4),12));
    zext_ln541_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_780_p4),64));
    zext_ln818_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1073_p3),32));
end behav;
