-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kNN_PredictAll is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    training_X_0_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    training_X_0_ce0 : OUT STD_LOGIC;
    training_X_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    training_X_1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    training_X_1_ce0 : OUT STD_LOGIC;
    training_X_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    training_X_2_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    training_X_2_ce0 : OUT STD_LOGIC;
    training_X_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    training_X_3_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    training_X_3_ce0 : OUT STD_LOGIC;
    training_X_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    training_Y_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    training_Y_ce0 : OUT STD_LOGIC;
    training_Y_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    training_Y_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    training_Y_ce1 : OUT STD_LOGIC;
    training_Y_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    testing_X_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    testing_X_ce0 : OUT STD_LOGIC;
    testing_X_we0 : OUT STD_LOGIC;
    testing_X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    testing_X_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    testing_X_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    testing_X_ce1 : OUT STD_LOGIC;
    testing_X_we1 : OUT STD_LOGIC;
    testing_X_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    testing_X_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    testing_Y_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    testing_Y_ce0 : OUT STD_LOGIC;
    testing_Y_we0 : OUT STD_LOGIC;
    testing_Y_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    min_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    min_ce0 : OUT STD_LOGIC;
    min_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    max_ce0 : OUT STD_LOGIC;
    max_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kNN_PredictAll is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kNN_PredictAll_kNN_PredictAll,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.800100,HLS_SYN_LAT=128461318,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=104648,HLS_SYN_LUT=60921,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_43A : STD_LOGIC_VECTOR (10 downto 0) := "10000111010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_3_reg_142 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal or_ln196_fu_103_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln196_reg_150 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln194_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln196_1_fu_110_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln196_1_reg_155 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln196_2_fu_117_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln196_2_reg_160 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_kNN_Predict_4_fu_62_ap_start : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_ap_done : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_ap_idle : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_ap_ready : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_training_X_0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_kNN_Predict_4_fu_62_training_X_0_ce0 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_training_X_1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_kNN_Predict_4_fu_62_training_X_1_ce0 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_training_X_2_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_kNN_Predict_4_fu_62_training_X_2_ce0 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_training_X_3_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_kNN_Predict_4_fu_62_training_X_3_ce0 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_training_Y_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_kNN_Predict_4_fu_62_training_Y_ce0 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_training_Y_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_kNN_Predict_4_fu_62_training_Y_ce1 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_min_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_kNN_Predict_4_fu_62_min_ce0 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_max_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_kNN_Predict_4_fu_62_max_ce0 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_testing_X_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_kNN_Predict_4_fu_62_testing_X_ce0 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_testing_X_we0 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_testing_X_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_kNN_Predict_4_fu_62_testing_X_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_kNN_Predict_4_fu_62_testing_X_ce1 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_testing_X_we1 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_testing_X_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_kNN_Predict_4_fu_62_testing_Y_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_kNN_Predict_4_fu_62_testing_Y_ce0 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_testing_Y_we0 : STD_LOGIC;
    signal grp_kNN_Predict_4_fu_62_testing_Y_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_kNN_Predict_4_fu_62_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_58 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln194_fu_124_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kNN_PredictAll_kNN_Predict_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        training_X_0_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        training_X_0_ce0 : OUT STD_LOGIC;
        training_X_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        training_X_1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        training_X_1_ce0 : OUT STD_LOGIC;
        training_X_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        training_X_2_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        training_X_2_ce0 : OUT STD_LOGIC;
        training_X_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        training_X_3_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        training_X_3_ce0 : OUT STD_LOGIC;
        training_X_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        training_Y_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        training_Y_ce0 : OUT STD_LOGIC;
        training_Y_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        training_Y_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        training_Y_ce1 : OUT STD_LOGIC;
        training_Y_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        min_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        min_ce0 : OUT STD_LOGIC;
        min_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        max_ce0 : OUT STD_LOGIC;
        max_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        testing_X_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        testing_X_ce0 : OUT STD_LOGIC;
        testing_X_we0 : OUT STD_LOGIC;
        testing_X_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        testing_X_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        testing_X_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        testing_X_ce1 : OUT STD_LOGIC;
        testing_X_we1 : OUT STD_LOGIC;
        testing_X_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        testing_X_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        queryDatapoint_0 : IN STD_LOGIC_VECTOR (10 downto 0);
        queryDatapoint_1 : IN STD_LOGIC_VECTOR (10 downto 0);
        queryDatapoint_2 : IN STD_LOGIC_VECTOR (10 downto 0);
        queryDatapoint_3 : IN STD_LOGIC_VECTOR (10 downto 0);
        testing_Y_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        testing_Y_ce0 : OUT STD_LOGIC;
        testing_Y_we0 : OUT STD_LOGIC;
        testing_Y_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_kNN_Predict_4_fu_62 : component kNN_PredictAll_kNN_Predict_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_kNN_Predict_4_fu_62_ap_start,
        ap_done => grp_kNN_Predict_4_fu_62_ap_done,
        ap_idle => grp_kNN_Predict_4_fu_62_ap_idle,
        ap_ready => grp_kNN_Predict_4_fu_62_ap_ready,
        training_X_0_address0 => grp_kNN_Predict_4_fu_62_training_X_0_address0,
        training_X_0_ce0 => grp_kNN_Predict_4_fu_62_training_X_0_ce0,
        training_X_0_q0 => training_X_0_q0,
        training_X_1_address0 => grp_kNN_Predict_4_fu_62_training_X_1_address0,
        training_X_1_ce0 => grp_kNN_Predict_4_fu_62_training_X_1_ce0,
        training_X_1_q0 => training_X_1_q0,
        training_X_2_address0 => grp_kNN_Predict_4_fu_62_training_X_2_address0,
        training_X_2_ce0 => grp_kNN_Predict_4_fu_62_training_X_2_ce0,
        training_X_2_q0 => training_X_2_q0,
        training_X_3_address0 => grp_kNN_Predict_4_fu_62_training_X_3_address0,
        training_X_3_ce0 => grp_kNN_Predict_4_fu_62_training_X_3_ce0,
        training_X_3_q0 => training_X_3_q0,
        training_Y_address0 => grp_kNN_Predict_4_fu_62_training_Y_address0,
        training_Y_ce0 => grp_kNN_Predict_4_fu_62_training_Y_ce0,
        training_Y_q0 => training_Y_q0,
        training_Y_address1 => grp_kNN_Predict_4_fu_62_training_Y_address1,
        training_Y_ce1 => grp_kNN_Predict_4_fu_62_training_Y_ce1,
        training_Y_q1 => training_Y_q1,
        min_address0 => grp_kNN_Predict_4_fu_62_min_address0,
        min_ce0 => grp_kNN_Predict_4_fu_62_min_ce0,
        min_q0 => min_q0,
        max_address0 => grp_kNN_Predict_4_fu_62_max_address0,
        max_ce0 => grp_kNN_Predict_4_fu_62_max_ce0,
        max_q0 => max_q0,
        testing_X_address0 => grp_kNN_Predict_4_fu_62_testing_X_address0,
        testing_X_ce0 => grp_kNN_Predict_4_fu_62_testing_X_ce0,
        testing_X_we0 => grp_kNN_Predict_4_fu_62_testing_X_we0,
        testing_X_d0 => grp_kNN_Predict_4_fu_62_testing_X_d0,
        testing_X_q0 => testing_X_q0,
        testing_X_address1 => grp_kNN_Predict_4_fu_62_testing_X_address1,
        testing_X_ce1 => grp_kNN_Predict_4_fu_62_testing_X_ce1,
        testing_X_we1 => grp_kNN_Predict_4_fu_62_testing_X_we1,
        testing_X_d1 => grp_kNN_Predict_4_fu_62_testing_X_d1,
        testing_X_q1 => testing_X_q1,
        queryDatapoint_0 => i_3_reg_142,
        queryDatapoint_1 => or_ln196_reg_150,
        queryDatapoint_2 => or_ln196_1_reg_155,
        queryDatapoint_3 => or_ln196_2_reg_160,
        testing_Y_address0 => grp_kNN_Predict_4_fu_62_testing_Y_address0,
        testing_Y_ce0 => grp_kNN_Predict_4_fu_62_testing_Y_ce0,
        testing_Y_we0 => grp_kNN_Predict_4_fu_62_testing_Y_we0,
        testing_Y_d0 => grp_kNN_Predict_4_fu_62_testing_Y_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_kNN_Predict_4_fu_62_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_kNN_Predict_4_fu_62_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln194_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_kNN_Predict_4_fu_62_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_kNN_Predict_4_fu_62_ap_ready = ap_const_logic_1)) then 
                    grp_kNN_Predict_4_fu_62_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_58 <= ap_const_lv11_0;
            elsif (((icmp_ln194_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_58 <= add_ln194_fu_124_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_142 <= i_fu_58;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln194_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    or_ln196_1_reg_155(0) <= or_ln196_1_fu_110_p2(0);    or_ln196_1_reg_155(10 downto 2) <= or_ln196_1_fu_110_p2(10 downto 2);
                    or_ln196_2_reg_160(10 downto 2) <= or_ln196_2_fu_117_p2(10 downto 2);
                    or_ln196_reg_150(10 downto 1) <= or_ln196_fu_103_p2(10 downto 1);
            end if;
        end if;
    end process;
    or_ln196_reg_150(0) <= '1';
    or_ln196_1_reg_155(1) <= '1';
    or_ln196_2_reg_160(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln194_fu_97_p2, grp_kNN_Predict_4_fu_62_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln194_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_kNN_Predict_4_fu_62_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln194_fu_124_p2 <= std_logic_vector(unsigned(i_fu_58) + unsigned(ap_const_lv11_4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_kNN_Predict_4_fu_62_ap_done)
    begin
        if ((grp_kNN_Predict_4_fu_62_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_97_p2)
    begin
        if (((icmp_ln194_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_97_p2)
    begin
        if (((icmp_ln194_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_kNN_Predict_4_fu_62_ap_start <= grp_kNN_Predict_4_fu_62_ap_start_reg;
    icmp_ln194_fu_97_p2 <= "1" when (unsigned(i_fu_58) < unsigned(ap_const_lv11_43A)) else "0";
    max_address0 <= grp_kNN_Predict_4_fu_62_max_address0;
    max_ce0 <= grp_kNN_Predict_4_fu_62_max_ce0;
    min_address0 <= grp_kNN_Predict_4_fu_62_min_address0;
    min_ce0 <= grp_kNN_Predict_4_fu_62_min_ce0;
    or_ln196_1_fu_110_p2 <= (i_fu_58 or ap_const_lv11_2);
    or_ln196_2_fu_117_p2 <= (i_fu_58 or ap_const_lv11_3);
    or_ln196_fu_103_p2 <= (i_fu_58 or ap_const_lv11_1);
    testing_X_address0 <= grp_kNN_Predict_4_fu_62_testing_X_address0;
    testing_X_address1 <= grp_kNN_Predict_4_fu_62_testing_X_address1;
    testing_X_ce0 <= grp_kNN_Predict_4_fu_62_testing_X_ce0;
    testing_X_ce1 <= grp_kNN_Predict_4_fu_62_testing_X_ce1;
    testing_X_d0 <= grp_kNN_Predict_4_fu_62_testing_X_d0;
    testing_X_d1 <= grp_kNN_Predict_4_fu_62_testing_X_d1;
    testing_X_we0 <= grp_kNN_Predict_4_fu_62_testing_X_we0;
    testing_X_we1 <= grp_kNN_Predict_4_fu_62_testing_X_we1;
    testing_Y_address0 <= grp_kNN_Predict_4_fu_62_testing_Y_address0;
    testing_Y_ce0 <= grp_kNN_Predict_4_fu_62_testing_Y_ce0;
    testing_Y_d0 <= grp_kNN_Predict_4_fu_62_testing_Y_d0;
    testing_Y_we0 <= grp_kNN_Predict_4_fu_62_testing_Y_we0;
    training_X_0_address0 <= grp_kNN_Predict_4_fu_62_training_X_0_address0;
    training_X_0_ce0 <= grp_kNN_Predict_4_fu_62_training_X_0_ce0;
    training_X_1_address0 <= grp_kNN_Predict_4_fu_62_training_X_1_address0;
    training_X_1_ce0 <= grp_kNN_Predict_4_fu_62_training_X_1_ce0;
    training_X_2_address0 <= grp_kNN_Predict_4_fu_62_training_X_2_address0;
    training_X_2_ce0 <= grp_kNN_Predict_4_fu_62_training_X_2_ce0;
    training_X_3_address0 <= grp_kNN_Predict_4_fu_62_training_X_3_address0;
    training_X_3_ce0 <= grp_kNN_Predict_4_fu_62_training_X_3_ce0;
    training_Y_address0 <= grp_kNN_Predict_4_fu_62_training_Y_address0;
    training_Y_address1 <= grp_kNN_Predict_4_fu_62_training_Y_address1;
    training_Y_ce0 <= grp_kNN_Predict_4_fu_62_training_Y_ce0;
    training_Y_ce1 <= grp_kNN_Predict_4_fu_62_training_Y_ce1;
end behav;
