// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kNN_PredictAll_isinf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_x;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln585_fu_66_p2;
reg   [0:0] icmp_ln585_reg_93;
wire   [0:0] icmp_ln585_1_fu_72_p2;
reg   [0:0] icmp_ln585_1_reg_98;
wire   [31:0] grp_fu_26_p0;
wire   [31:0] data_V_fu_31_p1;
wire   [30:0] trunc_ln368_fu_35_p1;
wire   [31:0] p_Result_s_fu_43_p3;
wire   [7:0] tmp_2_fu_56_p4;
wire   [22:0] trunc_ln585_fu_39_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] or_ln585_fu_78_p2;
wire   [0:0] grp_fu_26_p2;
wire   [0:0] and_ln585_fu_82_p2;
reg   [0:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 1'd0;
end

kNN_PredictAll_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_26_p0),
    .din1(32'd2139095040),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_26_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= and_ln585_fu_82_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln585_1_reg_98 <= icmp_ln585_1_fu_72_p2;
        icmp_ln585_reg_93 <= icmp_ln585_fu_66_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = and_ln585_fu_82_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln585_fu_82_p2 = (or_ln585_fu_78_p2 & grp_fu_26_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign data_V_fu_31_p1 = p_x;

assign grp_fu_26_p0 = p_Result_s_fu_43_p3;

assign icmp_ln585_1_fu_72_p2 = ((trunc_ln585_fu_39_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_66_p2 = ((tmp_2_fu_56_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln585_fu_78_p2 = (icmp_ln585_reg_93 | icmp_ln585_1_reg_98);

assign p_Result_s_fu_43_p3 = {{1'd0}, {trunc_ln368_fu_35_p1}};

assign tmp_2_fu_56_p4 = {{data_V_fu_31_p1[30:23]}};

assign trunc_ln368_fu_35_p1 = data_V_fu_31_p1[30:0];

assign trunc_ln585_fu_39_p1 = data_V_fu_31_p1[22:0];

endmodule //kNN_PredictAll_isinf
