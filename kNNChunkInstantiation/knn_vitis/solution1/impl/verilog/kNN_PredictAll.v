// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kNN_PredictAll_kNN_PredictAll,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.800100,HLS_SYN_LAT=128461318,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=104648,HLS_SYN_LUT=60921,HLS_VERSION=2022_1}" *)

module kNN_PredictAll (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        training_X_0_address0,
        training_X_0_ce0,
        training_X_0_q0,
        training_X_1_address0,
        training_X_1_ce0,
        training_X_1_q0,
        training_X_2_address0,
        training_X_2_ce0,
        training_X_2_q0,
        training_X_3_address0,
        training_X_3_ce0,
        training_X_3_q0,
        training_Y_address0,
        training_Y_ce0,
        training_Y_q0,
        training_Y_address1,
        training_Y_ce1,
        training_Y_q1,
        testing_X_address0,
        testing_X_ce0,
        testing_X_we0,
        testing_X_d0,
        testing_X_q0,
        testing_X_address1,
        testing_X_ce1,
        testing_X_we1,
        testing_X_d1,
        testing_X_q1,
        testing_Y_address0,
        testing_Y_ce0,
        testing_Y_we0,
        testing_Y_d0,
        min_address0,
        min_ce0,
        min_q0,
        max_address0,
        max_ce0,
        max_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] training_X_0_address0;
output   training_X_0_ce0;
input  [31:0] training_X_0_q0;
output  [15:0] training_X_1_address0;
output   training_X_1_ce0;
input  [31:0] training_X_1_q0;
output  [15:0] training_X_2_address0;
output   training_X_2_ce0;
input  [31:0] training_X_2_q0;
output  [15:0] training_X_3_address0;
output   training_X_3_ce0;
input  [31:0] training_X_3_q0;
output  [12:0] training_Y_address0;
output   training_Y_ce0;
input  [7:0] training_Y_q0;
output  [12:0] training_Y_address1;
output   training_Y_ce1;
input  [7:0] training_Y_q1;
output  [15:0] testing_X_address0;
output   testing_X_ce0;
output   testing_X_we0;
output  [31:0] testing_X_d0;
input  [31:0] testing_X_q0;
output  [15:0] testing_X_address1;
output   testing_X_ce1;
output   testing_X_we1;
output  [31:0] testing_X_d1;
input  [31:0] testing_X_q1;
output  [10:0] testing_Y_address0;
output   testing_Y_ce0;
output   testing_Y_we0;
output  [7:0] testing_Y_d0;
output  [5:0] min_address0;
output   min_ce0;
input  [31:0] min_q0;
output  [5:0] max_address0;
output   max_ce0;
input  [31:0] max_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] i_3_reg_142;
wire    ap_CS_fsm_state2;
wire   [10:0] or_ln196_fu_103_p2;
reg   [10:0] or_ln196_reg_150;
wire   [0:0] icmp_ln194_fu_97_p2;
wire   [10:0] or_ln196_1_fu_110_p2;
reg   [10:0] or_ln196_1_reg_155;
wire   [10:0] or_ln196_2_fu_117_p2;
reg   [10:0] or_ln196_2_reg_160;
wire    grp_kNN_Predict_4_fu_62_ap_start;
wire    grp_kNN_Predict_4_fu_62_ap_done;
wire    grp_kNN_Predict_4_fu_62_ap_idle;
wire    grp_kNN_Predict_4_fu_62_ap_ready;
wire   [15:0] grp_kNN_Predict_4_fu_62_training_X_0_address0;
wire    grp_kNN_Predict_4_fu_62_training_X_0_ce0;
wire   [15:0] grp_kNN_Predict_4_fu_62_training_X_1_address0;
wire    grp_kNN_Predict_4_fu_62_training_X_1_ce0;
wire   [15:0] grp_kNN_Predict_4_fu_62_training_X_2_address0;
wire    grp_kNN_Predict_4_fu_62_training_X_2_ce0;
wire   [15:0] grp_kNN_Predict_4_fu_62_training_X_3_address0;
wire    grp_kNN_Predict_4_fu_62_training_X_3_ce0;
wire   [12:0] grp_kNN_Predict_4_fu_62_training_Y_address0;
wire    grp_kNN_Predict_4_fu_62_training_Y_ce0;
wire   [12:0] grp_kNN_Predict_4_fu_62_training_Y_address1;
wire    grp_kNN_Predict_4_fu_62_training_Y_ce1;
wire   [5:0] grp_kNN_Predict_4_fu_62_min_address0;
wire    grp_kNN_Predict_4_fu_62_min_ce0;
wire   [5:0] grp_kNN_Predict_4_fu_62_max_address0;
wire    grp_kNN_Predict_4_fu_62_max_ce0;
wire   [15:0] grp_kNN_Predict_4_fu_62_testing_X_address0;
wire    grp_kNN_Predict_4_fu_62_testing_X_ce0;
wire    grp_kNN_Predict_4_fu_62_testing_X_we0;
wire   [31:0] grp_kNN_Predict_4_fu_62_testing_X_d0;
wire   [15:0] grp_kNN_Predict_4_fu_62_testing_X_address1;
wire    grp_kNN_Predict_4_fu_62_testing_X_ce1;
wire    grp_kNN_Predict_4_fu_62_testing_X_we1;
wire   [31:0] grp_kNN_Predict_4_fu_62_testing_X_d1;
wire   [10:0] grp_kNN_Predict_4_fu_62_testing_Y_address0;
wire    grp_kNN_Predict_4_fu_62_testing_Y_ce0;
wire    grp_kNN_Predict_4_fu_62_testing_Y_we0;
wire   [7:0] grp_kNN_Predict_4_fu_62_testing_Y_d0;
reg    grp_kNN_Predict_4_fu_62_ap_start_reg;
wire    ap_CS_fsm_state3;
reg   [10:0] i_fu_58;
wire   [10:0] add_ln194_fu_124_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_kNN_Predict_4_fu_62_ap_start_reg = 1'b0;
end

kNN_PredictAll_kNN_Predict_4 grp_kNN_Predict_4_fu_62(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_kNN_Predict_4_fu_62_ap_start),
    .ap_done(grp_kNN_Predict_4_fu_62_ap_done),
    .ap_idle(grp_kNN_Predict_4_fu_62_ap_idle),
    .ap_ready(grp_kNN_Predict_4_fu_62_ap_ready),
    .training_X_0_address0(grp_kNN_Predict_4_fu_62_training_X_0_address0),
    .training_X_0_ce0(grp_kNN_Predict_4_fu_62_training_X_0_ce0),
    .training_X_0_q0(training_X_0_q0),
    .training_X_1_address0(grp_kNN_Predict_4_fu_62_training_X_1_address0),
    .training_X_1_ce0(grp_kNN_Predict_4_fu_62_training_X_1_ce0),
    .training_X_1_q0(training_X_1_q0),
    .training_X_2_address0(grp_kNN_Predict_4_fu_62_training_X_2_address0),
    .training_X_2_ce0(grp_kNN_Predict_4_fu_62_training_X_2_ce0),
    .training_X_2_q0(training_X_2_q0),
    .training_X_3_address0(grp_kNN_Predict_4_fu_62_training_X_3_address0),
    .training_X_3_ce0(grp_kNN_Predict_4_fu_62_training_X_3_ce0),
    .training_X_3_q0(training_X_3_q0),
    .training_Y_address0(grp_kNN_Predict_4_fu_62_training_Y_address0),
    .training_Y_ce0(grp_kNN_Predict_4_fu_62_training_Y_ce0),
    .training_Y_q0(training_Y_q0),
    .training_Y_address1(grp_kNN_Predict_4_fu_62_training_Y_address1),
    .training_Y_ce1(grp_kNN_Predict_4_fu_62_training_Y_ce1),
    .training_Y_q1(training_Y_q1),
    .min_address0(grp_kNN_Predict_4_fu_62_min_address0),
    .min_ce0(grp_kNN_Predict_4_fu_62_min_ce0),
    .min_q0(min_q0),
    .max_address0(grp_kNN_Predict_4_fu_62_max_address0),
    .max_ce0(grp_kNN_Predict_4_fu_62_max_ce0),
    .max_q0(max_q0),
    .testing_X_address0(grp_kNN_Predict_4_fu_62_testing_X_address0),
    .testing_X_ce0(grp_kNN_Predict_4_fu_62_testing_X_ce0),
    .testing_X_we0(grp_kNN_Predict_4_fu_62_testing_X_we0),
    .testing_X_d0(grp_kNN_Predict_4_fu_62_testing_X_d0),
    .testing_X_q0(testing_X_q0),
    .testing_X_address1(grp_kNN_Predict_4_fu_62_testing_X_address1),
    .testing_X_ce1(grp_kNN_Predict_4_fu_62_testing_X_ce1),
    .testing_X_we1(grp_kNN_Predict_4_fu_62_testing_X_we1),
    .testing_X_d1(grp_kNN_Predict_4_fu_62_testing_X_d1),
    .testing_X_q1(testing_X_q1),
    .queryDatapoint_0(i_3_reg_142),
    .queryDatapoint_1(or_ln196_reg_150),
    .queryDatapoint_2(or_ln196_1_reg_155),
    .queryDatapoint_3(or_ln196_2_reg_160),
    .testing_Y_address0(grp_kNN_Predict_4_fu_62_testing_Y_address0),
    .testing_Y_ce0(grp_kNN_Predict_4_fu_62_testing_Y_ce0),
    .testing_Y_we0(grp_kNN_Predict_4_fu_62_testing_Y_we0),
    .testing_Y_d0(grp_kNN_Predict_4_fu_62_testing_Y_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_kNN_Predict_4_fu_62_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln194_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_kNN_Predict_4_fu_62_ap_start_reg <= 1'b1;
        end else if ((grp_kNN_Predict_4_fu_62_ap_ready == 1'b1)) begin
            grp_kNN_Predict_4_fu_62_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_58 <= 11'd0;
    end else if (((icmp_ln194_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_58 <= add_ln194_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_142 <= i_fu_58;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln194_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        or_ln196_1_reg_155[0] <= or_ln196_1_fu_110_p2[0];
or_ln196_1_reg_155[10 : 2] <= or_ln196_1_fu_110_p2[10 : 2];
        or_ln196_2_reg_160[10 : 2] <= or_ln196_2_fu_117_p2[10 : 2];
        or_ln196_reg_150[10 : 1] <= or_ln196_fu_103_p2[10 : 1];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_kNN_Predict_4_fu_62_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln194_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln194_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln194_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_kNN_Predict_4_fu_62_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln194_fu_124_p2 = (i_fu_58 + 11'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign grp_kNN_Predict_4_fu_62_ap_start = grp_kNN_Predict_4_fu_62_ap_start_reg;

assign icmp_ln194_fu_97_p2 = ((i_fu_58 < 11'd1082) ? 1'b1 : 1'b0);

assign max_address0 = grp_kNN_Predict_4_fu_62_max_address0;

assign max_ce0 = grp_kNN_Predict_4_fu_62_max_ce0;

assign min_address0 = grp_kNN_Predict_4_fu_62_min_address0;

assign min_ce0 = grp_kNN_Predict_4_fu_62_min_ce0;

assign or_ln196_1_fu_110_p2 = (i_fu_58 | 11'd2);

assign or_ln196_2_fu_117_p2 = (i_fu_58 | 11'd3);

assign or_ln196_fu_103_p2 = (i_fu_58 | 11'd1);

assign testing_X_address0 = grp_kNN_Predict_4_fu_62_testing_X_address0;

assign testing_X_address1 = grp_kNN_Predict_4_fu_62_testing_X_address1;

assign testing_X_ce0 = grp_kNN_Predict_4_fu_62_testing_X_ce0;

assign testing_X_ce1 = grp_kNN_Predict_4_fu_62_testing_X_ce1;

assign testing_X_d0 = grp_kNN_Predict_4_fu_62_testing_X_d0;

assign testing_X_d1 = grp_kNN_Predict_4_fu_62_testing_X_d1;

assign testing_X_we0 = grp_kNN_Predict_4_fu_62_testing_X_we0;

assign testing_X_we1 = grp_kNN_Predict_4_fu_62_testing_X_we1;

assign testing_Y_address0 = grp_kNN_Predict_4_fu_62_testing_Y_address0;

assign testing_Y_ce0 = grp_kNN_Predict_4_fu_62_testing_Y_ce0;

assign testing_Y_d0 = grp_kNN_Predict_4_fu_62_testing_Y_d0;

assign testing_Y_we0 = grp_kNN_Predict_4_fu_62_testing_Y_we0;

assign training_X_0_address0 = grp_kNN_Predict_4_fu_62_training_X_0_address0;

assign training_X_0_ce0 = grp_kNN_Predict_4_fu_62_training_X_0_ce0;

assign training_X_1_address0 = grp_kNN_Predict_4_fu_62_training_X_1_address0;

assign training_X_1_ce0 = grp_kNN_Predict_4_fu_62_training_X_1_ce0;

assign training_X_2_address0 = grp_kNN_Predict_4_fu_62_training_X_2_address0;

assign training_X_2_ce0 = grp_kNN_Predict_4_fu_62_training_X_2_ce0;

assign training_X_3_address0 = grp_kNN_Predict_4_fu_62_training_X_3_address0;

assign training_X_3_ce0 = grp_kNN_Predict_4_fu_62_training_X_3_ce0;

assign training_Y_address0 = grp_kNN_Predict_4_fu_62_training_Y_address0;

assign training_Y_address1 = grp_kNN_Predict_4_fu_62_training_Y_address1;

assign training_Y_ce0 = grp_kNN_Predict_4_fu_62_training_Y_ce0;

assign training_Y_ce1 = grp_kNN_Predict_4_fu_62_training_Y_ce1;

always @ (posedge ap_clk) begin
    or_ln196_reg_150[0] <= 1'b1;
    or_ln196_1_reg_155[1] <= 1'b1;
    or_ln196_2_reg_160[1:0] <= 2'b11;
end

endmodule //kNN_PredictAll
